{"version":3,"sources":["utility.js","components/NoteList/NoteListRow.js","components/NoteList/NoteList.js","actions/actions.js","components/NoteList/NoteListContainer.js","reducers/noteFilterReducer.js","components/NoteList/NoteListUtility.js","components/NoteList/NoteListUtilityContainer.js","components/NoteList/NoteListPane.js","components/FilterList/MainFilterList.js","components/FilterList/MainFilterListContainer.js","components/FilterList/TagFilterListRow.js","components/FilterList/TagFilterList.js","components/FilterList/TagFilterListContainer.js","components/FilterList/FilterListPane.js","components/Editor/EditorArea.js","components/Editor/EditorAreaContainer.js","components/Editor/SlideModal.js","components/Editor/EditorUtility.js","components/Editor/EditorUtilityContainer.js","components/Editor/TagItem.js","components/Editor/AddTagField.js","components/Editor/TagArea.js","components/Editor/TagAreaContainer.js","components/Editor/EditorPane.js","components/App.js","serviceWorker.js","reducers/notesReducers.js","reducers/index.js","reducers/tagListReducer.js","reducers/selectedNoteIdReducer.js","sagas.js","index.js"],"names":["formatTime","ms","date","Date","getFullYear","toDoubleDigits","getMonth","getDate","getHours","getMinutes","num","slice","NoteListRow","id","text","isSelected","onClick","className","trim","length","containsOnlyWhitespace","trimStart","match","getTitleLine","replace","getFirstLineOfContent","NoteList","filteredList","selectedNoteId","onClickRow","map","listItem","key","ADD_NOTE","TRASH_NOTE","RESTORE_NOTE","DELETE_NOTE","CHANGE_FILTER","nextNoteId","selectNote","type","payload","changeFilter","noteFilter","updateVisibleId","NoteListContainer","connect","state","notes","noteList","filter","note","visibleIdList","includes","dispatch","ID_SHOW_ALL","now","ID_SHOW_TRASH","initialState","filterName","NoteListUtility","onClickAddButton","data-tooltip","NoteListUtilityContainer","defaultTag","created","addNote","NoteListPane","MainFilterList","onClickMainFilter","MainFilterListContainer","TagFilterListRow","tag","tagName","TagFilterList","tagList","onClickTagFilter","useState","isEditing","setIsEditing","TagFilterListContainer","FilterListPane","EditorArea","props","textAreaRef","React","createRef","this","current","focus","ref","readOnly","value","onChange","event","Component","getNoteTextById","find","EditorAreaContainer","modified","updateText","target","SlideModal","isOpen","setIsOpen","selectedNote","ReactDOM","createPortal","document","querySelector","EditorUtility","onClickTrashButton","onClickRestoreButton","onClickDeleteButton","EditorUtilityContainer","findIndex","trashNote","restoreNote","deleteNote","TagItem","AddTagField","onKeyDown","placeholder","inputString","keyCode","TagArea","selectedNoteTags","onKeyDownHandler","onClickTag","TagAreaContainer","tags","noteId","addTagToNote","addTagToList","removeTagFromNote","EditorPane","App","Boolean","window","location","hostname","getNoteIndexById","filterVisibleNote","isTrashed","some","rootReducer","combineReducers","noteIndex","action","Object","assign","existInTags","tagIndex","existInList","handleAddNote","handleChangeFilter","waitAbstractNoteAction","handleTrashNote","handleRestoreNote","handleDeleteNote","rootSaga","getVisibleIdList","getNoteFilter","take","put","select","actionType","trashedIndex","indexOf","nextSelectedIndex","nextSelectedId","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47f08834.chunk.js","sourcesContent":["// ミリ秒表記の時刻をYYYY/MM/DD hh:mmにフォーマットする\r\nexport const formatTime = (ms) => {\r\n  const date = new Date(ms);\r\n  return date.getFullYear() + \"/\" + toDoubleDigits(date.getMonth() + 1) + \"/\" + toDoubleDigits(date.getDate()) + \" \" + toDoubleDigits(date.getHours()) + \":\" + toDoubleDigits(date.getMinutes());\r\n};\r\n\r\n// 1桁の数字を0埋めした2桁にする\r\nconst toDoubleDigits = (num) => {\r\n  return (\"0\" + num).slice(-2);\r\n};\r\n\r\n// 改行以外の文字が入力されているかチェックする\r\n// 改行・空白のみの場合はtrue、それ以外が含まれる場合はfalse\r\nexport const containsOnlyWhitespace = (text) => {\r\n  return (text.trim().length === 0 ? true : false);\r\n}\r\n\r\n// メモ内容の1行目(タイトル)を抜き出す\r\nexport const getTitleLine = (text) => {\r\n  // 1文字目以前の改行を削除し、改行以外の文字列を抜き出す\r\n  return text.trimStart().match(/.*/);\r\n}\r\n\r\n// メモ内容のタイトルの次の行を抜き出す\r\nexport const getFirstLineOfContent = (text) => {\r\n  // タイトル行を空文字列に置き換えて、タイトル行後の改行を削除、改行以外の文字列を抜き出す\r\n  return text.trimStart().replace(/.*/, \"\").trimStart().match(/.*/);\r\n}","import React from \"react\";\r\nimport { getTitleLine, getFirstLineOfContent, containsOnlyWhitespace } from \"../../utility\";\r\n\r\nconst NoteListRow = ({ id, text, isSelected, onClick }) => {\r\n  return (\r\n    <div\r\n      className={\"note-list-row\" + (isSelected ? \" note-list-row-selected\" : \"\")}\r\n      onClick={() => { onClick(id) }}\r\n    >\r\n      <div className=\"note-list-row-title\">\r\n        {containsOnlyWhitespace(text) ? \"New Note...\" : getTitleLine(text)}\r\n      </div>\r\n      <div className=\"note-list-row-content\">\r\n        {text.length === 0 ? \"\" : getFirstLineOfContent(text)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteListRow;","import React from \"react\";\r\nimport NoteListRow from \"./NoteListRow\";\r\n\r\nconst NoteList = ({ filteredList, selectedNoteId, onClickRow }) => {\r\n  return (\r\n    <div className=\"note-list\">\r\n      {selectedNoteId === null ? <div className=\"note-list-message\">No Notes</div> : filteredList.map((listItem) => {\r\n        return (\r\n          <NoteListRow\r\n            key={listItem.id}\r\n            id={listItem.id}\r\n            text={listItem.text}\r\n            isSelected={listItem.id === selectedNoteId}\r\n            onClick={onClickRow}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteList;","export const ADD_NOTE = \"ADD_NOTE\";\r\nexport const UPDATE_TEXT = \"UPDATE_TEXT\";\r\nexport const TRASH_NOTE = \"TRASH_NOTE\";\r\nexport const RESTORE_NOTE = \"RESTORE_NOTE\";\r\nexport const DELETE_NOTE = \"DELETE_NOTE\";\r\nexport const SELECT_NOTE = \"SELECT_NOTE\";\r\nexport const CHANGE_FILTER = \"CHANGE_FILTER\";\r\nexport const UPDATE_VISIBLE_ID = \"UPDATE_VISIBLE_ID\";\r\nexport const ADD_TAG_TO_NOTE = \"ADD_TAG_TO_NOTE\";\r\nexport const ADD_TAG_TO_LIST = \"ADD_TAG_TO_LIST\";\r\nexport const REMOVE_TAG_FROM_NOTE = \"REMOVE_TAG_FROM_NOTE\";\r\nexport const REMOVE_TAG_FROM_LIST = \"REMOVE_TAG_FROM_LIST\";\r\n\r\nlet nextNoteId = 0;\r\nexport const addNote = (defaultTag, created) => {\r\n  return ({\r\n    type: ADD_NOTE,\r\n    payload: {\r\n      id: nextNoteId++,\r\n      defaultTag,\r\n      created,\r\n    }\r\n  });\r\n};\r\n\r\nexport const updateText = (id, text, modified) => {\r\n  return ({\r\n    type: UPDATE_TEXT,\r\n    payload: {\r\n      id,\r\n      text,\r\n      modified\r\n    }\r\n  });\r\n};\r\n\r\nexport const trashNote = (id) => {\r\n  return ({\r\n    type: TRASH_NOTE,\r\n    payload: {\r\n      id\r\n    }\r\n  });\r\n};\r\n\r\nexport const restoreNote = (id) => {\r\n  return ({\r\n    type: RESTORE_NOTE,\r\n    payload: {\r\n      id\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteNote = (id) => {\r\n  return ({\r\n    type: DELETE_NOTE,\r\n    payload: {\r\n      id\r\n    }\r\n  });\r\n};\r\n\r\nexport const selectNote = (id) => {\r\n  return ({\r\n    type: SELECT_NOTE,\r\n    payload: {\r\n      id\r\n    }\r\n  });\r\n};\r\n\r\nexport const changeFilter = (id, noteFilter) => {\r\n  return ({\r\n    type: CHANGE_FILTER,\r\n    payload: {\r\n      id,\r\n      noteFilter\r\n    }\r\n  });\r\n};\r\n\r\nexport const updateVisibleId = (noteFilter) => {\r\n  return ({\r\n    type: UPDATE_VISIBLE_ID,\r\n    payload: {\r\n      noteFilter\r\n    }\r\n  });\r\n};\r\n\r\nexport const addTagToNote = (noteId, id, tagName) => {\r\n  return {\r\n    type: ADD_TAG_TO_NOTE,\r\n    payload: {\r\n      noteId,\r\n      id,\r\n      tagName\r\n    }\r\n  };\r\n};\r\n\r\nexport const addTagToList = (id, tagName) => {\r\n  return {\r\n    type: ADD_TAG_TO_LIST,\r\n    payload: {\r\n      id,\r\n      tagName\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeTagFromNote = (noteId, id) => {\r\n  return {\r\n    type: REMOVE_TAG_FROM_NOTE,\r\n    payload: {\r\n      noteId,\r\n      id\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeTagFromList = (tagName) => {\r\n  return {\r\n    type: REMOVE_TAG_FROM_LIST,\r\n    payload: {\r\n      tagName\r\n    }\r\n  };\r\n};","import { connect } from \"react-redux\";\r\nimport NoteList from \"./NoteList\";\r\nimport { addNote, selectNote } from \"../../actions/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filteredList: state.notes.noteList.filter(note => state.notes.visibleIdList.includes(note.id)),\r\n    //filterVisibleNote(state.notes.noteList, state.notes.visibleNotesId),\r\n    selectedNoteId: state.selectedNoteId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClickRow: (id) => {\r\n      dispatch(selectNote(id));\r\n    }\r\n  };\r\n};\r\n\r\nconst NoteListContainer = connect(mapStateToProps, mapDispatchToProps)(NoteList);\r\n\r\nexport default NoteListContainer;","import { CHANGE_FILTER } from \"../actions/actions\";\r\n\r\nexport const ID_SHOW_ALL = Date.now();\r\nexport const ID_SHOW_TRASH = ID_SHOW_ALL + 1;\r\n\r\nconst initialState = {\r\n  id: ID_SHOW_ALL,\r\n  filterName: \"SHOW_ALL\"\r\n};\r\n\r\nexport const noteFilter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_FILTER:\r\n      return {\r\n        id: action.payload.id,\r\n        filterName: action.payload.noteFilter\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from \"react\";\r\nimport { ID_SHOW_TRASH } from \"../../reducers/noteFilterReducer\";\r\n\r\n// TODO: Trashを表示しているときはaddボタンをdisableにする\r\nconst NoteListUtility = ({noteFilter, onClickAddButton}) => {\r\n  return (\r\n    <div className=\"note-list-utility\">\r\n      <span className=\"icon menu-button\">&#xe90b;</span>\r\n      <span\r\n        className={\"icon tooltip add-button\" + (noteFilter.id === ID_SHOW_TRASH ? \" button-disable\" : \"\")}\r\n        data-tooltip=\"Add Note\"\r\n        onClick={() => { onClickAddButton(noteFilter, Date.now()); }}\r\n      >&#xe905;</span>\r\n      {/*\r\n      <button\r\n        className=\"add-button\"\r\n        disabled={noteFilter.id === ID_SHOW_TRASH ? true : false}\r\n        onClick={() => { onClickAddButton(noteFilter, Date.now()); }}\r\n      >\r\n        メモ追加\r\n      </button>\r\n      */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteListUtility;","import { addNote } from \"../../actions/actions\";\r\nimport NoteListUtility from \"./NoteListUtility\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    noteFilter: state.noteFilter\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClickAddButton: (defaultTag, created) => {\r\n      dispatch(addNote(defaultTag, created));\r\n    }\r\n  };\r\n};\r\n\r\nconst NoteListUtilityContainer = connect(mapStateToProps, mapDispatchToProps)(NoteListUtility);\r\n\r\nexport default NoteListUtilityContainer;","import React from \"react\";\r\nimport NoteListContainer from \"./NoteListContainer\";\r\nimport NoteListUtilityContainer from \"./NoteListUtilityContainer\";\r\n\r\nconst NoteListPane = () => {\r\n  return (\r\n    <div className=\"note-list-pane\">\r\n      <NoteListUtilityContainer />\r\n      <NoteListContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteListPane;","import React from \"react\";\r\nimport { ID_SHOW_ALL, ID_SHOW_TRASH } from \"../../reducers/noteFilterReducer\";\r\n\r\nconst MainFilterList = ({noteFilter, onClickMainFilter}) => {\r\n  return (\r\n    <div className=\"main-filter-list\">\r\n      <div\r\n        className={\"show-all-button\" + (noteFilter.id === ID_SHOW_ALL ? \" filter-selected\" : \"\")}\r\n        onClick={() => { onClickMainFilter(ID_SHOW_ALL, \"SHOW_ALL\") }}>\r\n        <span className=\"icon filter-list-icon\">&#xe90d;</span>All Note\r\n      </div>\r\n      <div\r\n        className={\"show-trash-button\" + (noteFilter.id === ID_SHOW_TRASH ? \" filter-selected\" : \"\")}\r\n        onClick={() => { onClickMainFilter(ID_SHOW_TRASH, \"SHOW_TRASH\") }}>\r\n        <span className=\"icon filter-list-icon\">&#xe90f;</span>Trash\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainFilterList;","import { connect } from \"react-redux\";\r\nimport MainFilterList from \"./MainFilterList\";\r\nimport { changeFilter } from \"../../actions/actions\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    noteFilter: state.noteFilter\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClickMainFilter: (id, noteFilter) => {\r\n      dispatch(changeFilter(id, noteFilter));\r\n    }\r\n  };\r\n};\r\n\r\nconst MainFilterListContainer = connect(mapStateToProps, mapDispatchToProps)(MainFilterList);\r\n\r\nexport default MainFilterListContainer;","import React from \"react\";\r\n\r\nconst TagFilterListRow = ({tag, noteFilter, onClick}) => {\r\n  return (\r\n    <div\r\n      className={\"tag-filter-list-row\" + (noteFilter.id === tag.id ? \" filter-selected\" : \"\")}\r\n      onClick={() => {onClick(tag.id, tag.tagName)}}\r\n    >\r\n      <span className=\"icon-delete-1 delete-tag-button\"></span>\r\n      <span className=\"tag-filter-list-row-name\">\r\n        {tag.tagName}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagFilterListRow;","import React, { useState } from \"react\";\r\nimport TagFilterListRow from \"./TagFilterListRow\";\r\n\r\nconst TagFilterList = ({noteFilter, tagList, onClickTagFilter}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  return (\r\n    <div className={\"tag-filter-list\" + (isEditing ? \" list-editing\" : \"\")}>\r\n      <div className=\"tag-filter-list-header\">\r\n        <span className=\"icon filter-list-icon\">&#xe90e;</span>Tags\r\n        <span className=\"edit-filter-list-button\" onClick={() => {setIsEditing(isEditing ? false : true)}}>\r\n          {isEditing ? \"Done\" : \"Edit\"}\r\n        </span>\r\n      </div>\r\n      {tagList.map((listItem) => {\r\n        return (\r\n          <TagFilterListRow\r\n            key={listItem.id}\r\n            noteFilter={noteFilter}\r\n            tag={listItem}\r\n            onClick={onClickTagFilter}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagFilterList;","import { changeFilter } from \"../../actions/actions\";\r\nimport TagFilterList from \"./TagFilterList\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    noteFilter: state.noteFilter,\r\n    tagList: state.tagList\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClickTagFilter: (id, noteFilter) => {\r\n      dispatch(changeFilter(id, noteFilter));\r\n    }\r\n  };\r\n};\r\n\r\nconst TagFilterListContainer = connect(mapStateToProps, mapDispatchToProps)(TagFilterList);\r\n\r\nexport default TagFilterListContainer;","import React from \"react\";\r\nimport MainFilterListContainer from \"./MainFilterListContainer\";\r\nimport TagFilterListContainer from \"./TagFilterListContainer\";\r\n\r\nconst FilterListPane = () => {\r\n  return (\r\n    <div className=\"filter-list-pane\">\r\n      <MainFilterListContainer />\r\n      <TagFilterListContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterListPane;","import React from \"react\";\r\n\r\n// オートフォーカスさせるためにcomponentDidUpdate()を使う必要があるのでクラスコンポーネントとして定義\r\nclass EditorArea extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.textAreaRef = React.createRef();\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    this.textAreaRef.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <textarea\r\n        className=\"editor-area\"\r\n        ref={this.textAreaRef}\r\n        readOnly={this.props.selectedNoteId === null ? true : false}\r\n        value={this.props.selectedNoteId === null ? \"\" : this.props.text}\r\n        onChange={(event) => { this.props.onChange(event, this.props.selectedNoteId, Date.now()); }} />\r\n    );\r\n  }\r\n}\r\n\r\n// 関数コンポーネントでもオートフォーカスさせる方法が見つかったら戻したい\r\n/*\r\nconst EditorArea = ({selectedNoteId, text, onChange}) => {\r\n  return (\r\n    <textarea\r\n      className=\"editor-area\"\r\n      readOnly={selectedNoteId === null ? true : false}\r\n      value={selectedNoteId === null ? \"\" : text}\r\n      onChange={(event) => { onChange(event, selectedNoteId, Date.now()); }} />\r\n  );\r\n};\r\n*/\r\n\r\nexport default EditorArea;","import { updateText } from \"../../actions/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport EditorArea from \"./EditorArea\";\r\n\r\nconst getNoteTextById = (notes, selectedNoteId) => {\r\n  if (notes.length === 0 || selectedNoteId === null) {\r\n    return;\r\n  }\r\n  let targetNote = notes.find(note => note.id === selectedNoteId);\r\n  return targetNote.text;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedNoteId: state.selectedNoteId,\r\n    text: getNoteTextById(state.notes.noteList, state.selectedNoteId)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onChange: (event, id, modified) => {\r\n      dispatch(updateText(id, event.target.value, modified));\r\n    }\r\n  };\r\n};\r\n\r\nconst EditorAreaContainer = connect(mapStateToProps, mapDispatchToProps)(EditorArea);\r\n\r\nexport default EditorAreaContainer;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { formatTime } from \"../../utility\";\r\n\r\n// isOpenで開閉制御、背景クリックでisOpenをfalseにする\r\n// TODO: 閉じるボタンつける\r\nconst SlideModal = ({isOpen, setIsOpen, selectedNote}) => {\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className={\"modal-outer\" + (isOpen ? \" modal-outer-open\" : \"\")} onClick={() => { setIsOpen(false) }}></div>\r\n      <div className={\"modal-inner\" + (isOpen ? \" modal-inner-open\" : \"\")}>\r\n        <div className=\"modal-title\">Info<span className=\"icon close-button\" onClick={() => { setIsOpen(false) }}>&#xe912;</span></div>\r\n        <div>\r\n          作成日\r\n        </div>\r\n        <div>\r\n          {formatTime(selectedNote.created)}\r\n        </div>\r\n        <div>\r\n          更新日\r\n        </div>\r\n        <div>\r\n          {formatTime(selectedNote.modified)}\r\n        </div>\r\n        <div>\r\n          {selectedNote.text.replace(/\\r?\\n/g, '').length}文字\r\n        </div>\r\n\r\n      </div>\r\n    </>,\r\n    document.querySelector(\"#modal\")\r\n  );\r\n};\r\n\r\nexport default SlideModal;","import React, { useState } from \"react\";\r\nimport { ID_SHOW_TRASH } from \"../../reducers/noteFilterReducer\";\r\nimport SlideModal from \"./SlideModal\";\r\n\r\nconst EditorUtility = ({ selectedNote, noteFilter, selectedNoteId, onClickTrashButton, onClickRestoreButton, onClickDeleteButton}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"editor-utility\">\r\n      {selectedNoteId !== null &&\r\n        <>\r\n          {noteFilter.id === ID_SHOW_TRASH ?\r\n            <>\r\n              <span\r\n                className=\"icon restore-button tooltip\"\r\n                data-tooltip=\"Restore Note\"\r\n                onClick={() => { onClickRestoreButton(selectedNoteId) }}\r\n              >&#xe910;</span>\r\n              <span\r\n                className=\"icon delete-button tooltip\"\r\n                data-tooltip=\"Delete Note\"\r\n                onClick={() => { onClickDeleteButton(selectedNoteId) }}\r\n              >&#xe914;</span>\r\n            </>\r\n            :\r\n            <span\r\n              className=\"icon trash-button tooltip\"\r\n              data-tooltip=\"Trash Note\"\r\n              onClick={() => { onClickTrashButton(selectedNoteId); }}\r\n            >&#xe90f;</span>\r\n          }\r\n          <span className=\"separator\"></span>\r\n          <span\r\n            className=\"icon preview-button tooltip\"\r\n            data-tooltip=\"Markdown Preview\"\r\n          >&#xe906;</span>\r\n          <span className=\"icon info-button\" onClick={() => setIsOpen(true)}>&#xe90a;</span>\r\n          <SlideModal\r\n            isOpen={isOpen}\r\n            setIsOpen={setIsOpen}\r\n            selectedNote={selectedNote}\r\n          />\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorUtility;","import { connect } from \"react-redux\";\r\nimport { trashNote, restoreNote, deleteNote } from \"../../actions/actions\";\r\nimport EditorUtility from \"./EditorUtility\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedNote: state.notes.noteList[state.notes.noteList.findIndex(note => note.id === state.selectedNoteId)],\r\n    noteFilter: state.noteFilter,\r\n    selectedNoteId: state.selectedNoteId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClickTrashButton: (id) => {\r\n      dispatch(trashNote(id));\r\n    },\r\n    onClickRestoreButton: (id) => {\r\n      dispatch(restoreNote(id));\r\n    },\r\n    onClickDeleteButton: (id) => {\r\n      dispatch(deleteNote(id));\r\n    }\r\n  };\r\n};\r\n\r\nconst EditorUtilityContainer = connect(mapStateToProps, mapDispatchToProps)(EditorUtility);\r\n\r\nexport default EditorUtilityContainer;","import React from \"react\";\r\n\r\nconst TagItem = ({tagName, onClick}) => {\r\n  return (\r\n    <span className=\"tag-item\" onClick={onClick}>\r\n      {tagName}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TagItem;","import React from \"react\";\r\n\r\nconst AddTagField = ({selectedNoteId, onKeyDown}) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className=\"add-tag-field\"\r\n      placeholder={selectedNoteId === null ? \"\" : \"Add a tag...\"}\r\n      readOnly={selectedNoteId === null ? true : false}\r\n      onKeyDown={(event) => {\r\n        const inputString = event.target.value.trim();\r\n        // 入力が0文字ではなくEnterキー押下かつ日本語入力未確定中(keyCode = 229)じゃなければ\r\n        if (inputString.length !== 0 && event.key === \"Enter\" && event.keyCode !== 229) {\r\n          onKeyDown(selectedNoteId, Date.now(), inputString);\r\n          // textboxの入力値を消去する\r\n          // TODO: 良くない方法な気がするので直せるなら直す\r\n          event.target.value = \"\";\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddTagField;","import React from \"react\";\r\nimport TagItem from \"./TagItem\";\r\nimport AddTagField from \"./AddTagField\";\r\n\r\nconst TagArea = ({selectedNoteTags, selectedNoteId, onKeyDownHandler, onClickTag}) => {\r\n  return (\r\n    <div className=\"tag-area\">\r\n      {selectedNoteTags.map((tag) => {\r\n        return (\r\n          <TagItem\r\n            key={tag.id}\r\n            tagName={tag.tagName}\r\n            onClick={() => onClickTag(selectedNoteId, tag.id)}\r\n          />\r\n        );\r\n      })}\r\n      <AddTagField\r\n        selectedNoteId={selectedNoteId}\r\n        onKeyDown={onKeyDownHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagArea;","import { addTagToNote, addTagToList, removeTagFromNote } from \"../../actions/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport TagArea from \"./TagArea\";\r\n\r\nconst getSelectedNoteTags = (noteList, selectedNoteId) => {\r\n  if (selectedNoteId === null) {\r\n    return [];\r\n  }\r\n  return noteList.find(note => note.id === selectedNoteId).tags;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    selectedNoteTags: getSelectedNoteTags(state.notes.noteList, state.selectedNoteId),\r\n    selectedNoteId: state.selectedNoteId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onKeyDownHandler: (noteId, id, tagName) => {\r\n      dispatch(addTagToNote(noteId, id, tagName));\r\n      dispatch(addTagToList(id, tagName));\r\n    },\r\n    onClickTag: (noteId, id) => {\r\n      dispatch(removeTagFromNote(noteId, id))\r\n    }\r\n  };\r\n};\r\n\r\nconst TagAreaContainer = connect(mapStateToProps, mapDispatchToProps)(TagArea);\r\n\r\nexport default TagAreaContainer;","import React from \"react\";\r\nimport EditorAreaContainer from \"./EditorAreaContainer\";\r\nimport EditorUtilityContainer from \"./EditorUtilityContainer\";\r\nimport TagAreaContainer from \"./TagAreaContainer\";\r\n\r\nconst EditorPane = () => {\r\n  return (\r\n    <div className=\"editor-pane\">\r\n      {/* Utility */}\r\n      <EditorUtilityContainer />\r\n      <div className=\"editor-area-container\">\r\n        <EditorAreaContainer />\r\n        <TagAreaContainer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditorPane;","import React from 'react';\nimport NoteListPane from './NoteList/NoteListPane';\nimport FilterListPane from './FilterList/FilterListPane';\nimport EditorPane from './Editor/EditorPane';\n\n\nconst App = () => {\n  return (\n    <div className=\"base\">\n      <FilterListPane />\n      <NoteListPane />\n      <EditorPane />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_NOTE, UPDATE_TEXT, TRASH_NOTE, UPDATE_VISIBLE_ID, ADD_TAG_TO_NOTE, restoreNote, RESTORE_NOTE, DELETE_NOTE, REMOVE_TAG_FROM_NOTE } from \"../actions/actions\";\r\nimport { ID_SHOW_ALL, ID_SHOW_TRASH } from \"./noteFilterReducer\";\r\n\r\nconst initialState = {\r\n  noteList: [],\r\n  visibleIdList: []\r\n};\r\n\r\nconst getNoteIndexById = (noteList, id) => {\r\n  return noteList.findIndex(note => note.id === id);\r\n}\r\n\r\nconst filterVisibleNote = (noteList, noteFilter) => {\r\n  switch (noteFilter.id) {\r\n    case ID_SHOW_ALL:\r\n      return noteList.filter(note => !note.isTrashed).map(note => note.id);\r\n    case ID_SHOW_TRASH:\r\n      return noteList.filter(note => note.isTrashed).map(note => note.id);\r\n    default:\r\n      return noteList.filter(note => {\r\n        // noteFilterで指定されたタグを含む、かつtrashされていないノートのみ取り出す\r\n        return note.tags.some(tag => tag.tagName === noteFilter.filterName) && !note.isTrashed;\r\n      }).map(note => note.id);\r\n  }\r\n};\r\n\r\nexport const notes = (state = initialState, action) => {\r\n  let noteIndex;\r\n  switch (action.type) {\r\n    case ADD_NOTE:\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          {\r\n            id: action.payload.id,\r\n            text: \"\",\r\n            tags: action.payload.defaultTag.id === ID_SHOW_ALL ? [] : [\r\n              {\r\n                id: action.payload.defaultTag.id,\r\n                tagName: action.payload.defaultTag.filterName\r\n              }\r\n            ],\r\n            created: action.payload.created,\r\n            modified: action.payload.created,\r\n            isTrashed: false\r\n          },\r\n          ...state.noteList\r\n        ],\r\n        visibleIdList: [\r\n          action.payload.id,\r\n          ...state.visibleIdList\r\n        ]\r\n      });\r\n    case UPDATE_TEXT:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.id);\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          Object.assign({}, state.noteList[noteIndex], {\r\n            text: action.payload.text,\r\n            modified: action.payload.modified\r\n          }),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    case TRASH_NOTE:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.id);\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          Object.assign({}, state.noteList[noteIndex], {\r\n            isTrashed: true\r\n          }),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    case RESTORE_NOTE:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.id);\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          Object.assign({}, state.noteList[noteIndex], {\r\n            isTrashed: false\r\n          }),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    case DELETE_NOTE:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.id);\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    case UPDATE_VISIBLE_ID:\r\n      return Object.assign({}, state, {\r\n        visibleIdList: filterVisibleNote(state.noteList, action.payload.noteFilter)\r\n      });\r\n    case ADD_TAG_TO_NOTE:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.noteId);\r\n      const existInTags = state.noteList[noteIndex].tags.some(tag => tag.tagName === action.payload.tagName);\r\n      return existInTags ? state : Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          Object.assign({}, state.noteList[noteIndex], {\r\n            tags: [\r\n              ...state.noteList[noteIndex].tags,\r\n              {\r\n                id: action.payload.id,\r\n                tagName: action.payload.tagName\r\n              }\r\n            ]\r\n          }),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    case REMOVE_TAG_FROM_NOTE:\r\n      noteIndex = getNoteIndexById(state.noteList, action.payload.noteId);\r\n      const tagIndex = state.noteList[noteIndex].tags.findIndex(tag => tag.id === action.payload.id);\r\n      return Object.assign({}, state, {\r\n        noteList: [\r\n          ...state.noteList.slice(0, noteIndex),\r\n          Object.assign({}, state.noteList[noteIndex], {\r\n            tags: [\r\n              ...state.noteList[noteIndex].tags.slice(0, tagIndex),\r\n              ...state.noteList[noteIndex].tags.slice(tagIndex + 1)\r\n            ]\r\n          }),\r\n          ...state.noteList.slice(noteIndex + 1)\r\n        ]\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { notes } from './notesReducers';\r\nimport { tagList } from './tagListReducer';\r\nimport { noteFilter } from './noteFilterReducer';\r\nimport { selectedNoteId } from './selectedNoteIdReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  notes: notes,\r\n  tagList,\r\n  noteFilter,\r\n  selectedNoteId\r\n});\r\n\r\nexport default rootReducer;","import { ADD_TAG_TO_LIST } from \"../actions/actions\";\r\n\r\nexport const tagList = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TAG_TO_LIST:\r\n      const existInList = state.some(tag => tag.tagName === action.payload.tagName);\r\n      return existInList ? state : [\r\n        ...state,\r\n        {\r\n          id: action.payload.id,\r\n          tagName: action.payload.tagName\r\n        }\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n};","import { SELECT_NOTE } from \"../actions/actions\";\r\n\r\nexport const selectedNoteId = (state = null, action) => {\r\n  switch (action.type) {\r\n    case SELECT_NOTE:\r\n      return action.payload.id;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { fork, take, put, select } from \"redux-saga/effects\";\r\nimport { ADD_NOTE, CHANGE_FILTER, updateVisibleId, TRASH_NOTE, RESTORE_NOTE, DELETE_NOTE } from \"./actions/actions\";\r\nimport { selectNote } from \"./actions/actions\";\r\n\r\nconst getNotes = state => state.notes;\r\nconst getVisibleIdList = state => state.notes.visibleIdList;\r\nconst getNoteFilter = state => state.noteFilter;\r\n\r\nfunction* handleAddNote() {\r\n  while (true) {\r\n    // ADD_NOTEのdispatchを待ち、dispatchされたらactionを取得する\r\n    const action = yield take(ADD_NOTE);\r\n    // dispatchされたactionからidを取得してselectNoteをdispatchする\r\n    yield put(selectNote(action.payload.id));\r\n  }\r\n}\r\n\r\nfunction* handleChangeFilter() {\r\n  while (true) {\r\n    const action = yield take(CHANGE_FILTER);\r\n    yield put(updateVisibleId({\r\n      id: action.payload.id,\r\n      filterName: action.payload.noteFilter\r\n    }));\r\n    const visibleIdList = yield select(getVisibleIdList);\r\n    yield put(selectNote(visibleIdList.length === 0 ? null : visibleIdList[0]));\r\n  }\r\n}\r\n\r\n// 表示リスト、選択位置の更新を伴う必要があるactionを待つ汎用ジェネレータ\r\nfunction* waitAbstractNoteAction(actionType) {\r\n  while (true) {\r\n    // dispatchされたらactionを取得する\r\n    let action = yield take(actionType);\r\n    let noteFilter = yield select(getNoteFilter);\r\n    let visibleIdList = yield select(getVisibleIdList);\r\n    // リストから消えるノートの位置を取得する\r\n    let trashedIndex = visibleIdList.indexOf(action.payload.id);\r\n    // 選択位置を変更する\r\n    // 削除位置が0だった場合は要素番号1の要素、それ以外の場合は1つ前の要素、要素1つの場合はnullに\r\n    let nextSelectedIndex = trashedIndex === 0 ? 1 : (trashedIndex - 1);\r\n    let nextSelectedId = visibleIdList.length === 1 ? null : visibleIdList[nextSelectedIndex];\r\n    // visibleIdListを更新する\r\n    yield put(updateVisibleId(noteFilter));\r\n    yield put(selectNote(nextSelectedId));\r\n  }\r\n}\r\n\r\n// ノートの削除を待つ\r\nfunction* handleTrashNote() {\r\n  yield waitAbstractNoteAction(TRASH_NOTE);\r\n}\r\n\r\n// ノートの復元を待つ\r\nfunction* handleRestoreNote() {\r\n  yield waitAbstractNoteAction(RESTORE_NOTE);\r\n}\r\n\r\n// ノートの完全削除を待つ\r\nfunction* handleDeleteNote() {\r\n  yield waitAbstractNoteAction(DELETE_NOTE);\r\n}\r\n\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield fork(handleAddNote);\r\n  yield fork(handleChangeFilter);\r\n  yield fork(handleTrashNote);\r\n  yield fork(handleRestoreNote);\r\n  yield fork(handleDeleteNote);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\nimport { Provider } from \"react-redux\";\n\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\n\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}